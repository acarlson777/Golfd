name: Check Commit Message Length

on:
  push:
    branches:
      - '**'  # Apply to all branches
  pull_request:
    branches:
      - '**'  # Apply to all branches

permissions: write-all  # ‚úÖ Allows GitHub Actions to push changes

jobs:
  check-commit-msg:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetches the full history

      - name: Get Commit Messages and Validate
        id: find-valid
        run: |
          event_type="${{ github.event_name }}"

          # Use try-catch equivalent with '||' to prevent fatal errors
          if [ "$event_type" = "push" ]; then
            new_commits=$(git rev-list ${{ github.event.before }}..${{ github.event.after }} --no-merges --reverse || echo "Error fetching commits")
          elif [ "$event_type" = "pull_request" ]; then
            new_commits=$(git log ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} --no-merges --oneline || echo "Error fetching commits")
          fi

          if [ "$new_commits" = "Error fetching commits" ]; then
            echo "‚ö†Ô∏è Skipping commit validation due to an invalid revision range error."
            exit 0  # Continue the workflow, don't fail
          fi

          echo "üìú New commits in this push/PR:"
          echo "$new_commits"

          invalid_commit=""
          invalid_message=""
          all_valid=true  # Flag to check if all commits are valid

          while IFS= read -r commit; do
            commit_hash=$(echo $commit | awk '{print $1}')
            commit_msg=$(git log --format=%B -n 1 $commit_hash | tr -d '\n')

            echo "üìù Checking commit: $commit_hash - '$commit_msg'"

            if [ ${#commit_msg} -le 12 ]; then
              echo "‚ùå ERROR: Commit '$commit_hash' has a short message: '$commit_msg'"
              invalid_commit="$commit_hash"
              invalid_message="$commit_msg"

              echo "Commit '$invalid_commit'"
              echo "Message '$invalid_message'"

              
              all_valid=false
            else
              echo "‚úÖ VALID: Commit '$commit_hash' - '$commit_msg' passes."
            fi
          done <<< "$new_commits"

          if ! $all_valid; then

            echo "Commit '$invalid_commit'"
            echo "Message '$invalid_message'"
            
            echo "invalid_commit=$invalid_commit" >> $GITHUB_ENV
            echo "invalid_message=$invalid_message" >> $GITHUB_ENV
            
            echo "Invalid commit: ${{ env.invalid_commit }}"
            echo "Invalid message: ${{ env.invalid_message }}"
            
            exit 1  # Fail the job if there's an invalid commit
          fi

  revert-bad-push:
    needs: check-commit-msg
    if: failure() && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure we have full commit history

      - name: Revert to Last Valid Commit
        run: |

          echo "Invalid commit: ${{ env.invalid_commit }}"
          echo "Invalid message: ${{ env.invalid_message }}"

          
          last_valid_commit="${{ github.event.before }}"
          last_valid_message=$(git log -1 --format=%B $last_valid_commit | tr -d '\n')

          echo "üö® Reverting to last valid commit: $last_valid_commit"
          echo "üîç Last valid commit message: '$last_valid_message'"

          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git reset --hard $last_valid_commit
          git push origin HEAD --force
          echo "‚úÖ Repository reverted to $last_valid_commit"

          # Persist variables for the next step
          echo "last_valid_commit=$last_valid_commit" >> $GITHUB_ENV
          echo "last_valid_message=$last_valid_message" >> $GITHUB_ENV


          echo "ENV LAST VALID COMMIT: ${{ env.last_valid_commit }}"
          echo "ENV LAST VALID MESSAGE: ${{ env.last_valid_message }}"

      - name: Create GitHub Issue (Notify Users)
        run: |
          repo=${{ github.repository }}
          token=${{ secrets.GITHUB_TOKEN }}

          echo "üîç Last valid commit message: '${{ env.last_valid_message }}'"

          issue_title="üö® Push Reverted: Commit Message Too Short"
          issue_body="A commit was pushed but had a message shorter than 12 characters. It was **automatically reverted**.\n\n\
          **Invalid Commit:** '${{ env.invalid_commit }}'\n\
          **Invalid Message:** '${{ env.invalid_message }}'\n\n\
          **Reverted To:** '${{ env.last_valid_commit }}'\n\
          **Last Valid Message:** '${{ env.last_valid_message }}'\n\n\
          **Action Required:** Please re-push with a descriptive commit message."

          echo "üìù Creating GitHub Issue..."
          curl -X POST -H "Authorization: token $token" \
            -d "{\"title\": \"$issue_title\", \"body\": \"$issue_body\"}" \
            https://api.github.com/repos/$repo/issues
          echo "‚úÖ Issue created to notify users."
