//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/Scripts/General/Input/InputDetection.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @InputDetection: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputDetection()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputDetection"",
    ""maps"": [
        {
            ""name"": ""inputdetection"",
            ""id"": ""d78ccff1-3d52-426d-9b30-e12dc9560a31"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""83487aeb-348c-4bae-b31a-e1161926cdf0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""touch"",
                    ""type"": ""Value"",
                    ""id"": ""f9576fbd-a8eb-4372-ae2c-11bcc2870d6d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1c3593d3-3d83-494f-a97b-97de25ad49d4"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8587d87-2ec9-4e18-9270-1dde0af2f29a"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // inputdetection
        m_inputdetection = asset.FindActionMap("inputdetection", throwIfNotFound: true);
        m_inputdetection_Newaction = m_inputdetection.FindAction("New action", throwIfNotFound: true);
        m_inputdetection_touch = m_inputdetection.FindAction("touch", throwIfNotFound: true);
    }

    ~@InputDetection()
    {
        Debug.Assert(!m_inputdetection.enabled, "This will cause a leak and performance issues, InputDetection.inputdetection.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // inputdetection
    private readonly InputActionMap m_inputdetection;
    private List<IInputdetectionActions> m_InputdetectionActionsCallbackInterfaces = new List<IInputdetectionActions>();
    private readonly InputAction m_inputdetection_Newaction;
    private readonly InputAction m_inputdetection_touch;
    public struct InputdetectionActions
    {
        private @InputDetection m_Wrapper;
        public InputdetectionActions(@InputDetection wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_inputdetection_Newaction;
        public InputAction @touch => m_Wrapper.m_inputdetection_touch;
        public InputActionMap Get() { return m_Wrapper.m_inputdetection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputdetectionActions set) { return set.Get(); }
        public void AddCallbacks(IInputdetectionActions instance)
        {
            if (instance == null || m_Wrapper.m_InputdetectionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputdetectionActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
            @touch.started += instance.OnTouch;
            @touch.performed += instance.OnTouch;
            @touch.canceled += instance.OnTouch;
        }

        private void UnregisterCallbacks(IInputdetectionActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
            @touch.started -= instance.OnTouch;
            @touch.performed -= instance.OnTouch;
            @touch.canceled -= instance.OnTouch;
        }

        public void RemoveCallbacks(IInputdetectionActions instance)
        {
            if (m_Wrapper.m_InputdetectionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputdetectionActions instance)
        {
            foreach (var item in m_Wrapper.m_InputdetectionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputdetectionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputdetectionActions @inputdetection => new InputdetectionActions(this);
    public interface IInputdetectionActions
    {
        void OnNewaction(InputAction.CallbackContext context);
        void OnTouch(InputAction.CallbackContext context);
    }
}
